javascript:(function(){javascript: (function main() {  /* I add random characters at the end of the ID so that it does not clash with any other ID's on the page */  const ID =    '--picture-in-picture-toolbar-8743fsfjkl9274g9832fkjdslfjksl7498247389'; /* Helper functions */  const get = (selector, el = document) => el.querySelector(selector);  const getAll = (selector, el = document) =>    Array.from(el.querySelectorAll(selector));  /* Remove our toolbar if it exists */ let _toolbar = get(`#${ID}%60);  if (_toolbar) {    _toolbar.parent.removeChild(_toolbar);  }  /* create the toolbar */ const toolbar = document.createElement(    'div'  ); /* Set the toolbar's ID, so we can remove it later */  toolbar.id = ID; /* Use shadow-dom as outlined here: https://developers.google.com/web/fundamentals/web-components/shadowdom */  /* Inside shadow dom we don't have to worry about conflicting styles. */ const shadowroot = toolbar.attachShadow(    { mode: 'open' }  );  shadowroot.innerHTML = %60<style>#container {  z-index: 9999;  border: 1px solid #000;  border-radius: 3px;  padding: 0.7em;  position: fixed;  top: 0.5em;  right: 0.5em;  background-color: rgba(0,0,0,0.7);  font-family: -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans",sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";}button {  padding: 0.5em 0.7em;  border-radius: 3px;  box-shadow: none;  border: 2px solid #fff;  background-color: transparent;  color: #fff;  cursor: pointer;}button:hover {  background-color: white;  color: black;}</style><div id="container">  <button aria-label="click to use inspect element" id="ie">    IE  </button> <button aria-label="click to toggle edit" id="edit">    Edit  </button><button aria-label="click to use killzapper" id="killzapper">    KillZapper  </button><button aria-label="click to use x-ray goggles" id="xrg">    XRG  </button>    <button aria-label="close" id="close">    x  </button></div>    %60;      get('#close', shadowroot).addEventListener('click', () => {    const toolbar = get(%60#${ID}%60);    if (toolbar) {      toolbar.parentNode.removeChild(toolbar);    }  });  const ieEl = get('#ie', shadowroot);  ieEl.addEventListener('click', e => {    (function(){(function() {var x = document.createElement("script");x.src = "https://cdn.jsdelivr.net/gh/SnowLord7/devconsole@master/main.js";x.onload = alert("Loaded Developer Console!");document.head.appendChild(x);})()})();  });  document.body.appendChild(toolbar);  const editEl = get('#edit', shadowroot);  editEl.addEventListener('click', e => {    (function(e,n,o,t){o=e.body,t="true"==o[n],o[n]=t?"false":"true",e.designMode=t?"off":"on"})(document,"contentEditable");  });  document.body.appendChild(toolbar);  const killzapperEl = get('#killzapper', shadowroot);  killzapperEl.addEventListener('click', e => {    (function(){var t=document.createElement("script");t.setAttribute("src","//d2z4mgf8zqkbu2.cloudfront.net/bookmarklets/killzapper."+Math.random()+".js"),document.body.appendChild(t)})();  });  document.body.appendChild(toolbar);  const xrgEl = get('#xrg', shadowroot);  xrgEl.addEventListener('click', e => {    (function () {var script=document.createElement('script');script.src='https://x-ray-goggles.mouse.org/webxray.js';script.className='webxray';script.setAttribute('data-lang','en-US');script.setAttribute('data-baseuri','https://x-ray-goggles.mouse.org');document.body.appendChild(script);}());  });  document.body.appendChild(toolbar);})();})();
